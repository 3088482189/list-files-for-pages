{"version":3,"sources":["wrap_start.js","polyfill.js","jq.js","global.js","function.js","jq_extend.js","mutation.js","snackbar.js","textfield.js","wrap_end.js","headroom.js","headroom.data.js","appbar.js","bottom_nav.js"],"names":["global","factory","exports","module","define","amd","mdui","this","lastTime","window","requestAnimationFrame","webkitRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","queueData","$","JQ","arr","i","length","selector","html","trim","toCreate","indexOf","tempParent","document","createElement","innerHTML","childNodes","push","elems","match","querySelectorAll","getElementById","slice","i$1","ready","nodeType","i$2","extend","this$1","args","len","arguments","Object","keys","forEach","prop","target","shift","loop","isObjectLike","obj","isFunction","fn","isString","isArrayLike","each","call","map","ref","value","ret","elem","concat","apply","merge","first","second","val","unique","result","prototype","elementDisplay","dir","nodes","nameIndex","node","j","_this","is","contains","parent","documentElement","param","key","destructure","keyTmp","v","Array","isArray","encodeURIComponent","join","el","get","index","undefined","filter","ele","$selector","not","$excludes","offset","getBoundingClientRect","left","pageXOffset","top","pageYOffset","width","height","offsetParent","css","position","self","name","parentOffset","nodeName","toLowerCase","show","display","style","getComputedStyle","getPropertyValue","body","appendChild","parentNode","removeChild","hide","toggle","hasClass","className","classList","removeAttr","attr","removeAttribute","removeProp","e","eq","last","children","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","$compareWith","find","foundElements","_","__","childNode","has","$targets","siblings","prevAll","add","nextAll","closest","parents","remove","empty","clone","cloneNode","replaceWith","newContent","before","serializeArray","elements","$elem","type","disabled","checked","serialize","props","0","1","2","defaults","set","setAttribute","argLength","getAttribute","k","classes","split","cls","Width","Height","isNaN","Number","doc","win","DOCUMENT_NODE","IEFixValue","isWidth","parseFloat","reverse","newChild","newChilds","copyByClone","tempDiv","child","insertBefore","nextSibling","appendTo","prependTo","after","replaceAll","original","dataNS","t","bubbles","cancelable","detail","n","createEvent","initCustomEvent","data","attributes","attribute","replace","u","charAt","toUpperCase","dataKey","removeData","initMouseEvent","Event","MouseEvent","CustomEvent","handlers","mduiElementId","fnFalse","getElementId","eventName","func","event","handler","toString","sel","removeEventListener","proxy","test","readyState","addEventListener","on","one","origCallback","off","elementId","useCapture","callFn","_detail","preventDefault","stopPropagation","proxyfn","_data","eName","trigger","evt","isMouseEvent","dispatchEvent","globalOptions","jsonpID","ajaxEvent","ajaxStart","ajaxSuccess","ajaxError","ajaxComplete","isQueryStringData","method","appendQuery","url","query","ajaxSetup","options","ajax","processData","async","cache","username","password","headers","xhrFields","statusCode","dataType","jsonp","jsonpCallback","now","contentType","timeout","callbacks","isCanceled","globals","eventParams","triggerEvent","xhr","triggerCallback","result1","result2","sendData","location","ArrayBuffer","Blob","Document","FormData","constructor","abortTimeout","callbackName","requestUrl","script","onerror","src","append","xhrTimeout","XMLHttpRequest","open","setRequestHeader","crossDomain","RegExp","$2","host","onload","textStatus","responseData","isHttpStatusSuccess","status","JSON","parse","responseText","err","responseType","response","statusText","onabort","abort","send","params","$document","$window","queue","queueName","dequeue","TouchHandler","touches","isAllow","allow","register","start","move","end","cancel","unlock","addClass","componentEvent","pluginName","inst","fullEventName","jQuery","GUID","entries","currentInst","DEFAULT","mutation","apiInit","that","item","$this","m","getProp","closeOnOutsideClick","$target","close","Snackbar","message","opts","state","timeoutId","buttonColorStyle","buttonColorClass","buttonColor","$snackbar","buttonText","_setPosition","reflow","clientLeft","transition","duration","webkitTransitionDuration","transitionDuration","transitionEnd","events","fireCallBack","transformOrigin","webkitTransformOrigin","transform","webkitTransform","showOverlay","zIndex","$overlay","level","hideOverlay","force","removeClass","lockScreen","$body","newBodyWidth","unlockScreen","throttle","delay","timer","guid","s4","floor","random","substring","Headroom","tolerance","initialClass","pinnedClass","unpinnedClass","$headroom","oldInst","down","up","_init","inited","lastScrollY","_attachEvent","_scroll","rafId","currentScrollY","direction","toleranceExceeded","abs","unpin","pin","enable","disable","getState","str","Function","substr","parseOptions","input","$input","reInit","domLoadedEvent","$textField","validity","valid","inputValue","hasExtraSpace","scrollHeight","maxlength","text","focus","updateTextFields","closeOnButtonClick","onClick","onButtonClick","onOpen","onOpened","onClose","onClosed","translateX","translateY","snackbarHeight","clientHeight","snackbar","isThis","$bottomNav"],"mappings":"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","file":"mdui.custom.min.js","sourcesContent":["/* jshint ignore:start */\n;(function(global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.mdui = factory());\n}(this, (function() {\n  'use strict';\n\n  /* jshint ignore:end */\n  var mdui = {};\n","/**\n * =============================================================================\n * ************   浏览器兼容性问题修复   ************\n * =============================================================================\n */\n\n/**\n * requestAnimationFrame\n * cancelAnimationFrame\n */\n(function () {\n  var lastTime = 0;\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = window.webkitRequestAnimationFrame;\n    window.cancelAnimationFrame = window.webkitCancelAnimationFrame;\n  }\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));\n\n      var id = window.setTimeout(function () {\n          callback(currTime + timeToCall);\n        }, timeToCall);\n\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n\n  if (!window.cancelAnimationFrame) {\n    window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n})();\n","/**\n * JQ 1.0.0 (https://github.com/zdhxiong/mdui.JQ#readme)\n * Copyright 2018-2018 zdhxiong\n * Licensed under MIT\n */\nvar $ = (function () {\n  'use strict';\n\n  var JQ = function JQ(arr) {\n    var self = this;\n\n    for (var i = 0; i < arr.length; i += 1) {\n      self[i] = arr[i];\n    }\n\n    self.length = arr.length;\n\n    return this;\n  };\n\n  function $(selector) {\n    var arr = [];\n\n    if (!selector) {\n      return new JQ(arr);\n    }\n\n    if (selector instanceof JQ) {\n      return selector;\n    }\n\n    if (typeof selector === 'string') {\n      var html = selector.trim();\n\n      if (html[0] === '<' && html[html.length - 1] === '>') {\n        // 创建 HTML 字符串\n        var toCreate = 'div';\n\n        if (html.indexOf('<li') === 0) {\n          toCreate = 'ul';\n        }\n\n        if (html.indexOf('<tr') === 0) {\n          toCreate = 'tbody';\n        }\n\n        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) {\n          toCreate = 'tr';\n        }\n\n        if (html.indexOf('<tbody') === 0) {\n          toCreate = 'table';\n        }\n\n        if (html.indexOf('<option') === 0) {\n          toCreate = 'select';\n        }\n\n        var tempParent = document.createElement(toCreate);\n        tempParent.innerHTML = html;\n\n        for (var i = 0; i < tempParent.childNodes.length; i += 1) {\n          arr.push(tempParent.childNodes[i]);\n        }\n      } else {\n        // 选择器\n        var elems = selector[0] === '#' && !selector.match(/[ .<>:~]/)\n          ? [document.getElementById(selector.slice(1))]\n          : document.querySelectorAll(selector);\n\n        for (var i$1 = 0; i$1 < elems.length; i$1 += 1) {\n          if (elems[i$1]) {\n            arr.push(elems[i$1]);\n          }\n        }\n      }\n    } else if (typeof selector === 'function') {\n      // function\n      return $(document).ready(selector);\n    } else if (selector.nodeType || selector === window || selector === document) {\n      // Node\n      arr.push(selector);\n    } else if (selector.length > 0 && selector[0].nodeType) {\n      // NodeList\n      for (var i$2 = 0; i$2 < selector.length; i$2 += 1) {\n        arr.push(selector[i$2]);\n      }\n    }\n\n    return new JQ(arr);\n  }\n\n  $.fn = JQ.prototype;\n\n  function extend() {\n    var this$1 = this;\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (!args.length) {\n      return this;\n    }\n\n    // $.extend(obj)\n    if (args.length === 1) {\n      Object.keys(args[0]).forEach(function (prop) {\n        this$1[prop] = args[0][prop];\n      });\n\n      return this;\n    }\n\n    // $.extend({}, defaults[, obj])\n    var target = args.shift();\n\n    var loop = function ( i ) {\n      Object.keys(args[i]).forEach(function (prop) {\n        target[prop] = args[i][prop];\n      });\n    };\n\n    for (var i = 0; i < args.length; i += 1) loop( i );\n\n    return target;\n  }\n\n  $.fn.extend = extend;\n  $.extend = extend;\n\n  /**\n   * 判断一个节点名\n   * @param ele\n   * @param name\n   * @returns {boolean}\n   */\n  function isNodeName(ele, name) {\n    return ele.nodeName && ele.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  /**\n   * 除去 null 后的 object 类型\n   * @param obj\n   * @returns {*|boolean}\n   */\n  function isObjectLike(obj) {\n    return typeof obj === 'object' && obj !== null;\n  }\n\n  function isFunction(fn) {\n    return typeof fn === 'function';\n  }\n\n  function isString(obj) {\n    return typeof obj === 'string';\n  }\n\n  function isWindow(win) {\n    return win && win === win.window;\n  }\n\n  function isDocument(doc) {\n    return doc && doc.nodeType === doc.DOCUMENT_NODE;\n  }\n\n  function isArrayLike(obj) {\n    return typeof obj.length === 'number';\n  }\n\n  /**\n   * 循环数组或对象\n   * @param obj\n   * @param callback\n   * @returns {*}\n   */\n  function each(obj, callback) {\n    if (isArrayLike(obj)) {\n      for (var i = 0; i < obj.length; i += 1) {\n        if (callback.call(obj[i], i, obj[i]) === false) {\n          return obj;\n        }\n      }\n    } else {\n      var keys = Object.keys(obj);\n      for (var i$1 = 0; i$1 < keys.length; i$1 += 1) {\n        if (callback.call(obj[keys[i$1]], keys[i$1], obj[keys[i$1]]) === false) {\n          return obj;\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  /**\n   * 遍历数组或对象，通过函数返回一个新的数组或对象，null 和 undefined 将被过滤掉。\n   * @param elems\n   * @param callback\n   * @returns {Array}\n   */\n  function map(elems, callback) {\n    var ref;\n\n    var value;\n    var ret = [];\n\n    each(elems, function (i, elem) {\n      value = callback(elem, i);\n\n      if (value !== null && value !== undefined) {\n        ret.push(value);\n      }\n    });\n\n    return (ref = []).concat.apply(ref, ret);\n  }\n\n  /**\n   * 把对象合并到第一个参数中，并返回第一个参数\n   * @param first\n   * @param second\n   * @returns {*}\n   */\n  function merge(first, second) {\n    each(second, function (i, val) {\n      first.push(val);\n    });\n\n    return first;\n  }\n\n  /**\n   * 删除数组中重复元素\n   * @param arr {Array}\n   * @returns {Array}\n   */\n  function unique(arr) {\n    var result = [];\n\n    for (var i = 0; i < arr.length; i += 1) {\n      if (result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n\n    return result;\n  }\n\n  var elementDisplay = {};\n\n  /**\n   * 获取元素的默认 display 样式值，用于 .show() 方法\n   * @param nodeName\n   * @returns {*}\n   */\n  function defaultDisplay(nodeName) {\n    var element;\n    var display;\n\n    if (!elementDisplay[nodeName]) {\n      element = document.createElement(nodeName);\n      document.body.appendChild(element);\n      display = getComputedStyle(element, '').getPropertyValue('display');\n      element.parentNode.removeChild(element);\n      if (display === 'none') {\n        display = 'block';\n      }\n\n      elementDisplay[nodeName] = display;\n    }\n\n    return elementDisplay[nodeName];\n  }\n\n  $.extend({\n    each: each,\n    merge: merge,\n    unique: unique,\n    map: map,\n\n    /**\n     * 一个 DOM 节点是否包含另一个 DOM 节点\n     * @param parent {Node} 父节点\n     * @param node {Node} 子节点\n     * @returns {Boolean}\n     */\n    contains: function contains(parent, node) {\n      if (parent && !node) {\n        return document.documentElement.contains(parent);\n      }\n\n      return parent !== node && parent.contains(node);\n    },\n\n    /**\n     * 将数组或对象序列化\n     * @param obj\n     * @returns {String}\n     */\n    param: function param(obj) {\n      if (!isObjectLike(obj)) {\n        return '';\n      }\n\n      var args = [];\n\n      function destructure(key, value) {\n        var keyTmp;\n\n        if (isObjectLike(value)) {\n          each(value, function (i, v) {\n            if (Array.isArray(value) && !isObjectLike(v)) {\n              keyTmp = '';\n            } else {\n              keyTmp = i;\n            }\n\n            destructure((key + \"[\" + keyTmp + \"]\"), v);\n          });\n        } else {\n          if (value !== null && value !== '') {\n            keyTmp = \"=\" + (encodeURIComponent(value));\n          } else {\n            keyTmp = '';\n          }\n\n          args.push(encodeURIComponent(key) + keyTmp);\n        }\n      }\n\n      each(obj, function (key, value) {\n        destructure(key, value);\n      });\n\n      return args.join('&');\n    },\n  });\n\n  $.fn.extend({\n    /**\n     * 遍历对象\n     * @param callback {Function}\n     * @return {JQ}\n     */\n    each: function each$1(callback) {\n      return each(this, callback);\n    },\n\n    /**\n     * 通过遍历集合中的节点对象，通过函数返回一个新的对象，null 或 undefined 将被过滤掉。\n     * @param callback {Function}\n     * @returns {JQ}\n     */\n    map: function map$1(callback) {\n      return new JQ(map(this, function (el, i) { return callback.call(el, i, el); }));\n    },\n\n    /**\n     * 获取指定 DOM 元素，没有 index 参数时，获取所有 DOM 的数组\n     * @param index {Number=}\n     * @returns {Node|Array}\n     */\n    get: function get(index) {\n      return index === undefined\n        ? [].slice.call(this)\n        : this[index >= 0 ? index : index + this.length];\n    },\n\n    /**\n     * array中提取的方法。从start开始，如果end 指出。提取不包含end位置的元素。\n     * @param args {start, end}\n     * @returns {JQ}\n     */\n    slice: function slice() {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      return new JQ([].slice.apply(this, args));\n    },\n\n    /**\n     * 筛选元素集合\n     * @param selector {String|JQ|Node|Function}\n     * @returns {JQ}\n     */\n    filter: function filter(selector) {\n      if (isFunction(selector)) {\n        return this.map(function (index, ele) { return (selector.call(ele, index, ele) ? ele : undefined); });\n      }\n\n      var $selector = $(selector);\n\n      return this.map(function (index, ele) { return ($selector.index(ele) > -1 ? ele : undefined); });\n    },\n\n    /**\n     * 从元素集合中删除指定的元素\n     * @param selector {String|Node|JQ|Function}\n     * @return {JQ}\n     */\n    not: function not(selector) {\n      var $excludes = this.filter(selector);\n\n      return this.map(function (index, ele) { return ($excludes.index(ele) > -1 ? undefined : ele); });\n    },\n\n    /**\n     * 获取元素相对于 document 的偏移\n     * @returns {Object}\n     */\n    offset: function offset() {\n      if (this[0]) {\n        var offset = this[0].getBoundingClientRect();\n\n        return {\n          left: offset.left + window.pageXOffset,\n          top: offset.top + window.pageYOffset,\n          width: offset.width,\n          height: offset.height,\n        };\n      }\n\n      return null;\n    },\n\n    /**\n     * 返回最近的用于定位的父元素\n     * @returns {*|JQ}\n     */\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var parent = this.offsetParent;\n\n        while (parent && $(parent).css('position') === 'static') {\n          parent = parent.offsetParent;\n        }\n\n        return parent || document.documentElement;\n      });\n    },\n\n    /**\n     * 获取元素相对于父元素的偏移\n     * @return {Object}\n     */\n    position: function position() {\n      var self = this;\n\n      if (!self[0]) {\n        return null;\n      }\n\n      var offsetParent;\n      var offset;\n      var parentOffset = {\n        top: 0,\n        left: 0,\n      };\n\n      if (self.css('position') === 'fixed') {\n        offset = self[0].getBoundingClientRect();\n      } else {\n        offsetParent = self.offsetParent();\n        offset = self.offset();\n        if (!isNodeName(offsetParent[0], 'html')) {\n          parentOffset = offsetParent.offset();\n        }\n\n        parentOffset = {\n          top: parentOffset.top + offsetParent.css('borderTopWidth'),\n          left: parentOffset.left + offsetParent.css('borderLeftWidth'),\n        };\n      }\n\n      return {\n        top: offset.top - parentOffset.top - self.css('marginTop'),\n        left: offset.left - parentOffset.left - self.css('marginLeft'),\n        width: offset.width,\n        height: offset.height,\n      };\n    },\n\n    /**\n     * 显示指定元素\n     * @returns {JQ}\n     */\n    show: function show() {\n      return this.each(function () {\n        if (this.style.display === 'none') {\n          this.style.display = '';\n        }\n\n        if (window.getComputedStyle(this, '').getPropertyValue('display') === 'none') {\n          this.style.display = defaultDisplay(this.nodeName);\n        }\n      });\n    },\n\n    /**\n     * 隐藏指定元素\n     * @returns {JQ}\n     */\n    hide: function hide() {\n      return this.each(function () {\n        this.style.display = 'none';\n      });\n    },\n\n    /**\n     * 切换元素的显示状态\n     * @returns {JQ}\n     */\n    toggle: function toggle() {\n      return this.each(function () {\n        this.style.display = this.style.display === 'none' ? '' : 'none';\n      });\n    },\n\n    /**\n     * 是否含有指定的 CSS 类\n     * @param className {String}\n     * @returns {boolean}\n     */\n    hasClass: function hasClass(className) {\n      if (!this[0] || !className) {\n        return false;\n      }\n\n      return this[0].classList.contains(className);\n    },\n\n    /**\n     * 移除指定属性\n     * @param attr {String}\n     * @returns {JQ}\n     */\n    removeAttr: function removeAttr(attr) {\n      return this.each(function () {\n        this.removeAttribute(attr);\n      });\n    },\n\n    /**\n     * 删除属性值\n     * @param name {String}\n     * @returns {JQ}\n     */\n    removeProp: function removeProp(name) {\n      return this.each(function () {\n        try {\n          delete this[name];\n        } catch (e) {\n          // empty\n        }\n      });\n    },\n\n    /**\n     * 获取当前对象中第n个元素\n     * @param index {Number}\n     * @returns {JQ}\n     */\n    eq: function eq(index) {\n      var ret = index === -1\n        ? this.slice(index)\n        : this.slice(index, +index + 1);\n\n      return new JQ(ret);\n    },\n\n    /**\n     * 获取对象中第一个元素\n     * @returns {JQ}\n     */\n    first: function first() {\n      return this.eq(0);\n    },\n\n    /**\n     * 获取对象中最后一个元素\n     * @returns {JQ}\n     */\n    last: function last() {\n      return this.eq(-1);\n    },\n\n    /**\n     * 获取一个元素的位置。\n     * 当 elem 参数没有给出时，返回当前元素在兄弟节点中的位置。\n     * 有给出了 elem 参数时，返回 elem 元素在当前对象中的位置\n     * @param elem {Selector|Node=}\n     * @returns {Number}\n     */\n    index: function index(elem) {\n      if (!elem) {\n        // 获取当前 JQ 对象的第一个元素在同辈元素中的位置\n        return this\n          .eq(0)\n          .parent()\n          .children()\n          .get()\n          .indexOf(this[0]);\n      }\n\n      if (isString(elem)) {\n        // 返回当前 JQ 对象的第一个元素在指定选择器对应的元素中的位置\n        return $(elem)\n          .eq(0)\n          .parent()\n          .children()\n          .get()\n          .indexOf(this[0]);\n      }\n\n      // 返回指定元素在当前 JQ 对象中的位置\n      return this\n        .get()\n        .indexOf(elem);\n    },\n\n    /**\n     * 根据选择器、DOM元素或 JQ 对象来检测匹配元素集合，\n     * 如果其中至少有一个元素符合这个给定的表达式就返回true\n     * @param selector {String|Node|NodeList|Array|JQ|Window}\n     * @returns boolean\n     */\n    is: function is(selector) {\n      var self = this[0];\n\n      if (!self || selector === undefined || selector === null) {\n        return false;\n      }\n\n      if (isString(selector)) {\n        if (self === document || self === window) {\n          return false;\n        }\n\n        var matchesSelector = self.matches\n          || self.matchesSelector\n          || self.webkitMatchesSelector\n          || self.mozMatchesSelector\n          || self.oMatchesSelector\n          || self.msMatchesSelector;\n\n        return matchesSelector.call(self, selector);\n      }\n\n      if (selector === document || selector === window) {\n        return self === selector;\n      }\n\n      if (selector.nodeType || isArrayLike(selector)) {\n        var $compareWith = selector.nodeType ? [selector] : selector;\n\n        for (var i = 0; i < $compareWith.length; i += 1) {\n          if ($compareWith[i] === self) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return false;\n    },\n\n    /**\n     * 根据 CSS 选择器找到后代节点的集合\n     * @param selector {String}\n     * @returns {JQ}\n     */\n    find: function find(selector) {\n      var foundElements = [];\n\n      this.each(function (i, _this) {\n        var nodeType = _this.nodeType;\n\n        if (nodeType !== 1 && nodeType !== 9) {\n          // 不是 element 和 document 则跳过\n          return;\n        }\n\n        merge(foundElements, _this.querySelectorAll(selector));\n      });\n\n      return new JQ(foundElements);\n    },\n\n    /**\n     * 找到直接子元素的元素集合\n     * @param selector {String=}\n     * @returns {JQ}\n     */\n    children: function children(selector) {\n      var children = [];\n\n      this.each(function (_, _this) {\n        each(_this.childNodes, function (__, childNode) {\n          if (childNode.nodeType !== 1) {\n            return;\n          }\n\n          if (!selector || (selector && $(childNode).is(selector))) {\n            children.push(childNode);\n          }\n        });\n      });\n\n      return new JQ(unique(children));\n    },\n\n    /**\n     * 保留含有指定子元素的元素，去掉不含有指定子元素的元素\n     * @param selector {String|Node|JQ|NodeList|Array}\n     * @return {JQ}\n     */\n    has: function has(selector) {\n      var $targets = isString(selector) ? this.find(selector) : $(selector);\n      var length = $targets.length;\n\n      return this.filter(function () {\n        for (var i = 0; i < length; i += 1) {\n          if ($.contains(this, $targets[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n    },\n\n    /**\n     * 取得同辈元素的集合\n     * @param selector {String=}\n     * @returns {JQ}\n     */\n    siblings: function siblings(selector) {\n      return this.prevAll(selector).add(this.nextAll(selector));\n    },\n\n    /**\n     * 返回首先匹配到的父节点，包含父节点\n     * @param selector {String}\n     * @returns {JQ}\n     */\n    closest: function closest(selector) {\n      var self = this;\n\n      if (!self.is(selector)) {\n        self = self.parents(selector).eq(0);\n      }\n\n      return self;\n    },\n\n    /**\n     * 删除所有匹配的元素\n     * @returns {JQ}\n     */\n    remove: function remove() {\n      return this.each(function (i, _this) {\n        if (_this.parentNode) {\n          _this.parentNode.removeChild(_this);\n        }\n      });\n    },\n\n    /**\n     * 添加匹配的元素到当前对象中\n     * @param selector {String|JQ}\n     * @returns {JQ}\n     */\n    add: function add(selector) {\n      return new JQ(unique(merge(this.get(), $(selector))));\n    },\n\n    /**\n     * 删除子节点\n     * @returns {JQ}\n     */\n    empty: function empty() {\n      return this.each(function () {\n        this.innerHTML = '';\n      });\n    },\n\n    /**\n     * 通过深度克隆来复制集合中的所有元素。\n     * (通过原生 cloneNode 方法深度克隆来复制集合中的所有元素。此方法不会有数据和事件处理程序复制到新的元素。这点和jquery中利用一个参数来确定是否复制数据和事件处理不相同。)\n     * @returns {JQ}\n     */\n    clone: function clone() {\n      return this.map(function () {\n        return this.cloneNode(true);\n      });\n    },\n\n    /**\n     * 用新元素替换当前元素\n     * @param newContent {String|Node|NodeList|JQ}\n     * @returns {JQ}\n     */\n    replaceWith: function replaceWith(newContent) {\n      return this.before(newContent).remove();\n    },\n\n    /**\n     * 将表单元素的值组合成键值对数组\n     * @returns {Array}\n     */\n    serializeArray: function serializeArray() {\n      var result = [];\n      var elem = this[0];\n\n      if (!elem || !elem.elements) {\n        return result;\n      }\n\n      $([].slice.call(elem.elements)).each(function () {\n        var $elem = $(this);\n        var type = $elem.attr('type');\n        if (\n          this.nodeName.toLowerCase() !== 'fieldset'\n          && !this.disabled\n          && ['submit', 'reset', 'button'].indexOf(type) === -1\n          && (['radio', 'checkbox'].indexOf(type) === -1 || this.checked)\n        ) {\n          result.push({\n            name: $elem.attr('name'),\n            value: $elem.val(),\n          });\n        }\n      });\n\n      return result;\n    },\n\n    /**\n     * 将表单元素或对象序列化\n     * @returns {String}\n     */\n    serialize: function serialize() {\n      var result = [];\n\n      each(this.serializeArray(), function (i, elem) {\n        result.push(((encodeURIComponent(elem.name)) + \"=\" + (encodeURIComponent(elem.value))));\n      });\n\n      return result.join('&');\n    },\n  });\n\n  /**\n   * val - 获取或设置元素的值\n   * @param value {String=}\n   * @return {*|JQ}\n   */\n  /**\n   * html - 获取或设置元素的 HTML\n   * @param value {String=}\n   * @return {*|JQ}\n   */\n  /**\n   * text - 获取或设置元素的内容\n   * @param value {String=}\n   * @return {*|JQ}\n   */\n  each(['val', 'html', 'text'], function (nameIndex, name) {\n    var props = {\n      0: 'value',\n      1: 'innerHTML',\n      2: 'textContent',\n    };\n\n    var defaults = {\n      0: undefined,\n      1: undefined,\n      2: null,\n    };\n\n    $.fn[name] = function (value) {\n      if (value === undefined) {\n        // 获取值\n        return this[0] ? this[0][props[nameIndex]] : defaults[nameIndex];\n      }\n\n      // 设置值\n      return this.each(function (i, elem) {\n        elem[props[nameIndex]] = value;\n      });\n    };\n  });\n\n  /**\n   * attr - 获取或设置元素的属性值\n   * @param {name|props|key,value=}\n   * @return {String|JQ}\n   */\n  /**\n   * prop - 获取或设置元素的属性值\n   * @param {name|props|key,value=}\n   * @return {String|JQ}\n   */\n  /**\n   * css - 获取或设置元素的样式\n   * @param {name|props|key,value=}\n   * @return {String|JQ}\n   */\n  each(['attr', 'prop', 'css'], function (nameIndex, name) {\n    function set(elem, key, value) {\n      if (nameIndex === 0) {\n        elem.setAttribute(key, value);\n      } else if (nameIndex === 1) {\n        elem[key] = value;\n      } else {\n        elem.style[key] = value;\n      }\n    }\n\n    function get(elem, key) {\n      if (!elem) {\n        return undefined;\n      }\n\n      if (nameIndex === 0) {\n        return elem.getAttribute(key);\n      }\n\n      if (nameIndex === 1) {\n        return elem[key];\n      }\n\n      return window.getComputedStyle(elem, null).getPropertyValue(key);\n    }\n\n    $.fn[name] = function (key, value) {\n      var argLength = arguments.length;\n\n      if (argLength === 1 && isString(key)) {\n        // 获取值\n        return get(this[0], key);\n      }\n\n      // 设置值\n      return this.each(function (i, elem) {\n        if (argLength === 2) {\n          set(elem, key, value);\n        } else {\n          each(key, function (k, v) {\n            set(elem, k, v);\n          });\n        }\n      });\n    };\n  });\n\n  /**\n   * addClass - 添加 CSS 类，多个类名用空格分割\n   * @param className {String}\n   * @return {JQ}\n   */\n  /**\n   * removeClass - 移除 CSS 类，多个类名用空格分割\n   * @param className {String}\n   * @return {JQ}\n   */\n  /**\n   * toggleClass - 切换 CSS 类名，多个类名用空格分割\n   * @param className {String}\n   * @return {JQ}\n   */\n  each(['add', 'remove', 'toggle'], function (nameIndex, name) {\n    $.fn[(name + \"Class\")] = function (className) {\n      if (!className) {\n        return this;\n      }\n\n      var classes = className.split(' ');\n\n      return this.each(function (i, elem) {\n        each(classes, function (j, cls) {\n          elem.classList[name](cls);\n        });\n      });\n    };\n  });\n\n  /**\n   * width - 获取元素的宽度\n   * @return {Number}\n   */\n  /**\n   * height - 获取元素的高度\n   * @return {Number}\n   */\n  each({\n    Width: 'width',\n    Height: 'height',\n  }, function (prop, name) {\n    $.fn[name] = function (val) {\n      if (val === undefined) {\n        // 获取\n        var elem = this[0];\n\n        if (isWindow(elem)) {\n          return elem[(\"inner\" + prop)];\n        }\n\n        if (isDocument(elem)) {\n          return elem.documentElement[(\"scroll\" + prop)];\n        }\n\n        var $elem = $(elem);\n\n        // IE10、IE11 在 box-sizing:border-box 时，不会包含 padding 和 border，这里进行修复\n        var IEFixValue = 0;\n        var isWidth = name === 'width';\n        if ('ActiveXObject' in window) { // 判断是 IE 浏览器\n          if ($elem.css('box-sizing') === 'border-box') {\n            IEFixValue = parseFloat($elem.css((\"padding-\" + (isWidth ? 'left' : 'top'))))\n              + parseFloat($elem.css((\"padding-\" + ((isWidth ? 'right' : 'bottom')))))\n              + parseFloat($elem.css((\"border-\" + (isWidth ? 'left' : 'top') + \"-width\")))\n              + parseFloat($elem.css((\"border-\" + (isWidth ? 'right' : 'bottom') + \"-width\")));\n          }\n        }\n\n        return parseFloat($(elem).css(name)) + IEFixValue;\n      }\n\n      // 设置\n      /* eslint no-restricted-globals: 0 */\n      if (!isNaN(Number(val)) && val !== '') {\n        val += 'px';\n      }\n\n      return this.css(name, val);\n    };\n  });\n\n  /**\n   * innerWidth - 获取元素的宽度，包含内边距\n   * @return {Number}\n   */\n  /**\n   * innerHeight - 获取元素的高度，包含内边距\n   * @return {Number}\n   */\n  each({\n    Width: 'width',\n    Height: 'height',\n  }, function (prop, name) {\n    $.fn[(\"inner\" + prop)] = function () {\n      var value = this[name]();\n      var $elem = $(this[0]);\n\n      if ($elem.css('box-sizing') !== 'border-box') {\n        value += parseFloat($elem.css((\"padding-\" + (name === 'width' ? 'left' : 'top'))));\n        value += parseFloat($elem.css((\"padding-\" + (name === 'width' ? 'right' : 'bottom'))));\n      }\n\n      return value;\n    };\n  });\n\n  function dir(nodes, selector, nameIndex, node) {\n    var ret = [];\n    var elem;\n\n    nodes.each(function (j, _this) {\n      elem = _this[node];\n      while (elem) {\n        if (nameIndex === 2) {\n          // prevUntil\n          if (!selector || (selector && $(elem).is(selector))) {\n            break;\n          }\n\n          ret.push(elem);\n        } else if (nameIndex === 0) {\n          // prev\n          if (!selector || (selector && $(elem).is(selector))) {\n            ret.push(elem);\n          }\n\n          break;\n        } else if (!selector || (selector && $(elem).is(selector))) {\n          // prevAll\n          ret.push(elem);\n        }\n\n        elem = elem[node];\n      }\n    });\n\n    return new JQ(unique(ret));\n  }\n\n  /**\n   * prev - 取得前一个匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * prevAll - 取得前面所有匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * prevUntil - 取得前面的所有元素，直到遇到匹配的元素，不包含匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  each(['', 'All', 'Until'], function (nameIndex, name) {\n    $.fn[(\"prev\" + name)] = function (selector) {\n      // prevAll、prevUntil 需要把元素的顺序倒序处理，以便和 jQuery 的结果一致\n      var $nodes = nameIndex === 0 ? this : $(this.get().reverse());\n\n      return dir($nodes, selector, nameIndex, 'previousElementSibling');\n    };\n  });\n\n  /**\n   * next - 取得后一个匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * nextAll - 取得后面所有匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * nextUntil - 取得后面所有匹配的元素，直到遇到匹配的元素，不包含匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  each(['', 'All', 'Until'], function (nameIndex, name) {\n    $.fn[(\"next\" + name)] = function (selector) {\n      return dir(this, selector, nameIndex, 'nextElementSibling');\n    };\n  });\n\n  /**\n   * parent - 取得匹配的直接父元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * parents - 取得所有匹配的父元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * parentUntil - 取得所有的父元素，直到遇到匹配的元素，不包含匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  each(['', 's', 'sUntil'], function (nameIndex, name) {\n    $.fn[(\"parent\" + name)] = function (selector) {\n      // parents、parentsUntil 需要把元素的顺序反向处理，以便和 jQuery 的结果一致\n      var $nodes = nameIndex === 0 ? this : $(this.get().reverse());\n\n      return dir($nodes, selector, nameIndex, 'parentNode');\n    };\n  });\n\n  /**\n   * append - 在元素内部追加内容\n   * @param newChild {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * prepend - 在元素内部前置内容\n   * @param newChild {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  each(['append', 'prepend'], function (nameIndex, name) {\n    $.fn[name] = function (newChild) {\n      var newChilds;\n      var copyByClone = this.length > 1;\n\n      if (isString(newChild) && (newChild[0] !== '<' || newChild[newChild.length - 1] !== '>')) {\n        var tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n        newChilds = [].slice.call(tempDiv.childNodes);\n      } else {\n        newChilds = $(newChild).get();\n      }\n\n      if (nameIndex === 1) {\n        // prepend\n        newChilds.reverse();\n      }\n\n      return this.each(function (i, _this) {\n        each(newChilds, function (j, child) {\n          // 一个元素要同时追加到多个元素中，需要先复制一份，然后追加\n          if (copyByClone && i > 0) {\n            child = child.cloneNode(true);\n          }\n\n          if (nameIndex === 0) {\n            // append\n            _this.appendChild(child);\n          } else {\n            // prepend\n            _this.insertBefore(child, _this.childNodes[0]);\n          }\n        });\n      });\n    };\n  });\n\n  /**\n   * insertBefore - 插入到指定元素的前面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * insertAfter - 插入到指定元素的后面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  each(['insertBefore', 'insertAfter'], function (nameIndex, name) {\n    $.fn[name] = function (selector) {\n      var $elem = $(selector);\n\n      return this.each(function (i, _this) {\n        $elem.each(function (j, elem) {\n          elem.parentNode.insertBefore(\n            $elem.length === 1 ? _this : _this.cloneNode(true),\n            nameIndex === 0 ? elem : elem.nextSibling\n          );\n        });\n      });\n    };\n  });\n\n  /**\n   * appendTo - 追加到指定元素内容\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * prependTo - 前置到指定元素内部\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * before - 插入到指定元素前面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * after - 插入到指定元素后面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * replaceAll - 替换掉指定元素\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  each({\n    appendTo: 'append',\n    prependTo: 'prepend',\n    before: 'insertBefore',\n    after: 'insertAfter',\n    replaceAll: 'replaceWith',\n  }, function (name, original) {\n    $.fn[name] = function (selector) {\n      $(selector)[original](this);\n      return this;\n    };\n  });\n\n  var dataNS = 'mduiElementDataStorage';\n\n  $.extend({\n    /**\n     * 在指定元素上存储数据，或从指定元素上读取数据\n     * @param elem 必须， DOM 元素\n     * @param key 必须，键名\n     * @param value 可选，值\n     */\n    data: function data(elem, key, value) {\n      var data = {};\n\n      if (value !== undefined) {\n        // 根据 key、value 设置值\n        data[key] = value;\n      } else if (isObjectLike(key)) {\n        // 根据键值对设置值\n        data = key;\n      } else if (key === undefined) {\n        // 获取所有值\n        var result = {};\n\n        each(elem.attributes, function (i, attribute) {\n          var name = attribute.name;\n\n          if (name.indexOf('data-') === 0) {\n            var prop = name.slice(5).replace(/-./g, function (u) { return u.charAt(1).toUpperCase(); });\n\n            result[prop] = attribute.value;\n          }\n        });\n\n        if (elem[dataNS]) {\n          each(elem[dataNS], function (k, v) {\n            result[k] = v;\n          });\n        }\n\n        return result;\n      } else if (elem[dataNS] && (key in elem[dataNS])) {\n        // 获取指定值\n        return elem[dataNS][key];\n      } else {\n        // 从 data- 中获取指定值\n        var dataKey = elem.getAttribute((\"data-\" + key));\n\n        if (dataKey) {\n          return dataKey;\n        }\n\n        return undefined;\n      }\n\n      // 设置值\n      if (!elem[dataNS]) {\n        elem[dataNS] = {};\n      }\n\n      each(data, function (k, v) {\n        elem[dataNS][k] = v;\n      });\n\n      return undefined;\n    },\n\n    /**\n     * 移除指定元素上存放的数据\n     * @param elem 必须，DOM 元素\n     * @param key 必须，键名\n     */\n    removeData: function removeData(elem, key) {\n      if (elem[dataNS] && elem[dataNS][key]) {\n        elem[dataNS][key] = null;\n        delete elem[dataNS][key];\n      }\n    },\n  });\n\n  $.fn.extend({\n    /**\n     * 在元素上读取或设置数据\n     * @param key 必须\n     * @param value\n     * @returns {*}\n     */\n    data: function data(key, value) {\n      if (value === undefined) {\n        if (isObjectLike(key)) {\n          // 同时设置多个值\n          return this.each(function (i, elem) {\n            $.data(elem, key);\n          });\n        }\n\n        if (this[0]) {\n          // 获取值\n          return $.data(this[0], key);\n        }\n\n        return undefined;\n      }\n\n      // 设置值\n      return this.each(function (i, elem) {\n        $.data(elem, key, value);\n      });\n    },\n\n    /**\n     * 移除元素上存储的数据\n     * @param key 必须\n     * @returns {*}\n     */\n    removeData: function removeData(key) {\n      return this.each(function (i, elem) {\n        $.removeData(elem, key);\n      });\n    },\n  });\n\n  !function(){try{return new e(\"test\")}catch(e){}var e=function(e,t){t=t||{bubbles:!1,cancelable:!1};var n=document.createEvent(\"MouseEvent\");return n.initMouseEvent(e,t.bubbles,t.cancelable,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n};e.prototype=Event.prototype,window.MouseEvent=e;}();\n\n  !function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent(\"CustomEvent\");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}\"function\"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,window.CustomEvent=t);}();\n\n  // 存储事件\n  var handlers = {\n    // i: { // 元素ID\n    //   j: { // 事件ID\n    //     e: 事件名\n    //     fn: 事件处理函数\n    //     i: 事件ID\n    //     proxy:\n    //     sel: 选择器\n    //   }\n    // }\n  };\n\n  // 元素ID\n  var mduiElementId = 1;\n\n  function fnFalse() {\n    return false;\n  }\n\n  /**\n   * 为元素赋予一个唯一的ID\n   * @param element\n   * @returns {number|*}\n   */\n  function getElementId(element) {\n    if (!element.mduiElementId) {\n      mduiElementId += 1;\n      element.mduiElementId = mduiElementId;\n    }\n\n    return element.mduiElementId;\n  }\n\n  /**\n   * 获取匹配的事件\n   * @param element\n   * @param eventName\n   * @param func\n   * @param selector\n   * @returns {Array}\n   */\n  function getHandlers(element, eventName, func, selector) {\n    return (handlers[getElementId(element)] || []).filter(function (handler) { return handler\n      && (!eventName || handler.e === eventName)\n      && (!func || handler.fn.toString() === func.toString())\n      && (!selector || handler.sel === selector); });\n  }\n\n  /**\n   * 添加事件监听\n   * @param element\n   * @param eventName\n   * @param func\n   * @param data\n   * @param selector\n   */\n  function add(element, eventName, func, data, selector) {\n    var elementId = getElementId(element);\n\n    if (!handlers[elementId]) {\n      handlers[elementId] = [];\n    }\n\n    // 传入 data.useCapture 来设置 useCapture: true\n    var useCapture = false;\n    if (isObjectLike(data) && data.useCapture) {\n      useCapture = true;\n    }\n\n    eventName.split(' ').forEach(function (event) {\n      var handler = {\n        e: event,\n        fn: func,\n        sel: selector,\n        i: handlers[elementId].length,\n      };\n\n      function callFn(e, elem) {\n        // 因为鼠标事件模拟事件的 detail 属性是只读的，因此在 e._detail 中存储参数\n        /* eslint no-underscore-dangle: 0 */\n        var result = func.apply(elem, e._detail === undefined ? [e] : [e].concat(e._detail));\n\n        if (result === false) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      }\n\n      function proxyfn(e) {\n        e._data = data;\n\n        if (selector) {\n          // 事件代理\n          $(element)\n            .find(selector)\n            .get()\n            .reverse()\n            .forEach(function (elem) {\n              if (elem === e.target || $.contains(elem, e.target)) {\n                callFn(e, elem);\n              }\n            });\n        } else {\n          // 不使用事件代理\n          callFn(e, element);\n        }\n      }\n\n      handler.proxy = proxyfn;\n      handlers[elementId].push(handler);\n      element.addEventListener(handler.e, proxyfn, useCapture);\n    });\n  }\n\n  /**\n   * 移除事件监听\n   * @param element\n   * @param eventName\n   * @param func\n   * @param selector\n   */\n  function remove(element, eventName, func, selector) {\n    (eventName || '').split(' ').forEach(function (event) {\n      getHandlers(element, event, func, selector).forEach(function (handler) {\n        delete handlers[getElementId(element)][handler.i];\n        element.removeEventListener(handler.e, handler.proxy, false);\n      });\n    });\n  }\n\n  $.fn.extend({\n    /**\n     * DOM 加载完毕后调用的函数\n     * @param callback\n     * @returns {ready}\n     */\n    ready: function ready(callback) {\n      if (/complete|loaded|interactive/.test(document.readyState) && document.body) {\n        callback($);\n      } else {\n        document.addEventListener('DOMContentLoaded', function () {\n          callback($);\n        }, false);\n      }\n\n      return this;\n    },\n\n    /**\n     * 绑定事件\n     *\n     * $().on({eventName: fn}, selector, data);\n     * $().on({eventName: fn}, selector)\n     * $().on({eventName: fn})\n     * $().on(eventName, selector, data, fn);\n     * $().on(eventName, selector, fn);\n     * $().on(eventName, data, fn);\n     * $().on(eventName, fn);\n     * $().on(eventName, false);\n     *\n     * @param eventName\n     * @param selector\n     * @param data\n     * @param callback\n     * @param one 是否是 one 方法，只在 JQ 内部使用\n     * @returns\n     */\n    on: function on(eventName, selector, data, callback, one) {\n      var self = this;\n\n      // 默认\n      // $().on(event, selector, data, callback)\n\n      // event 使用 事件:函数 键值对\n      // event = {\n      //   'event1': callback1,\n      //   'event2': callback2\n      // }\n      //\n      // $().on(event, selector, data)\n      if (eventName && !isString(eventName)) {\n        each(eventName, function (type, fn) {\n          self.on(type, selector, data, fn);\n        });\n\n        return self;\n      }\n\n      // selector 不存在\n      // $().on(event, data, callback)\n      if (!isString(selector) && !isFunction(callback) && callback !== false) {\n        callback = data;\n        data = selector;\n        selector = undefined;\n      }\n\n      // data 不存在\n      // $().on(event, callback)\n      if (isFunction(data) || data === false) {\n        callback = data;\n        data = undefined;\n      }\n\n      // callback 为 false\n      // $().on(event, false)\n      if (callback === false) {\n        callback = fnFalse;\n      }\n\n      if (one === 1) {\n        var origCallback = callback;\n        callback = function () {\n          self.off(eventName, selector, callback);\n          /* eslint prefer-rest-params: 0 */\n          return origCallback.apply(this, arguments);\n        };\n      }\n\n      return this.each(function () {\n        add(this, eventName, callback, data, selector);\n      });\n    },\n\n    /**\n     * 绑定事件，只触发一次\n     * @param eventName\n     * @param selector\n     * @param data\n     * @param callback\n     */\n    one: function one(eventName, selector, data, callback) {\n      var self = this;\n\n      if (!isString(eventName)) {\n        each(eventName, function (type, fn) {\n          type.split(' ').forEach(function (eName) {\n            self.on(eName, selector, data, fn, 1);\n          });\n        });\n      } else {\n        eventName.split(' ').forEach(function (eName) {\n          self.on(eName, selector, data, callback, 1);\n        });\n      }\n\n      return this;\n    },\n\n    /**\n     * 取消绑定事件\n     *\n     * $().off(eventName, selector);\n     * $().off(eventName, callback);\n     * $().off(eventName, false);\n     *\n     */\n    off: function off(eventName, selector, callback) {\n      var self = this;\n\n      // event 使用 事件:函数 键值对\n      // event = {\n      //   'event1': callback1,\n      //   'event2': callback2\n      // }\n      //\n      // $().off(event, selector)\n      if (eventName && !isString(eventName)) {\n        each(eventName, function (type, fn) {\n          self.off(type, selector, fn);\n        });\n\n        return self;\n      }\n\n      // selector 不存在\n      // $().off(event, callback)\n      if (!isString(selector) && !isFunction(callback) && callback !== false) {\n        callback = selector;\n        selector = undefined;\n      }\n\n      // callback 为 false\n      // $().off(event, false)\n      if (callback === false) {\n        callback = fnFalse;\n      }\n\n      return self.each(function () {\n        remove(this, eventName, callback, selector);\n      });\n    },\n\n    /**\n     * 触发一个事件\n     * @param eventName\n     * @param data\n     * @returns {*|JQ}\n     */\n    trigger: function trigger(eventName, data) {\n      var isMouseEvent = ['click', 'mousedown', 'mouseup', 'mousemove'].indexOf(eventName) > -1;\n      var evt;\n\n      if (isMouseEvent) {\n        // Note: MouseEvent 无法传入 detail 参数\n        evt = new MouseEvent(eventName, {\n          bubbles: true,\n          cancelable: true,\n        });\n      } else {\n        evt = new CustomEvent(eventName, {\n          detail: data,\n          bubbles: true,\n          cancelable: true,\n        });\n      }\n\n      evt._detail = data;\n\n      return this.each(function () {\n        this.dispatchEvent(evt);\n      });\n    },\n  });\n\n  var globalOptions = {};\n  var jsonpID = 0;\n\n  // 全局事件名\n  var ajaxEvent = {\n    ajaxStart: 'start.mdui.ajax',\n    ajaxSuccess: 'success.mdui.ajax',\n    ajaxError: 'error.mdui.ajax',\n    ajaxComplete: 'complete.mdui.ajax',\n  };\n\n  /**\n   * 判断此请求方法是否通过查询字符串提交参数\n   * @param method 请求方法，大写\n   * @returns {boolean}\n   */\n  function isQueryStringData(method) {\n    return ['GET', 'HEAD'].indexOf(method) >= 0;\n  }\n\n  /**\n   * 添加参数到 URL 上，且 URL 中不存在 ? 时，自动把第一个 & 替换为 ?\n   * @param url\n   * @param query 参数 key=value\n   * @returns {string}\n   */\n  function appendQuery(url, query) {\n    return ((url + \"&\" + query)).replace(/[&?]{1,2}/, '?');\n  }\n\n  $.extend({\n\n    /**\n     * 为 ajax 请求设置全局配置参数\n     * @param options\n     */\n    ajaxSetup: function ajaxSetup(options) {\n      $.extend(globalOptions, options || {});\n    },\n\n    /**\n     * 发送 ajax 请求\n     * @param options\n     */\n    ajax: function ajax(options) {\n      // 配置参数\n      var defaults = {\n        // 请求方式\n        method: 'GET',\n        // 请求的数据，查询字符串或对象\n        data: false,\n        // 是否把数据转换为查询字符串发送，为 false 时不进行自动转换。\n        processData: true,\n        // 是否为异步请求\n        async: true,\n        // 是否从缓存中读取，只对 GET/HEAD 请求有效，dataType 为 jsonp 时为 false\n        cache: true,\n        // HTTP 访问认证的用户名\n        username: '',\n        // HTTP 访问认证的密码\n        password: '',\n        // 一个键值对，随着请求一起发送\n        headers: {},\n        // 设置 XHR 对象\n        xhrFields: {},\n        // 一个 HTTP 代码和函数的对象\n        statusCode: {},\n        // 预期服务器返回的数据类型 text、json、jsonp\n        dataType: 'text',\n        // jsonp 请求的回调函数名称\n        jsonp: 'callback',\n        // （string 或 Function）使用指定的回调函数名代替自动生成的回调函数名\n        jsonpCallback: function () {\n          jsonpID += 1;\n\n          return (\"mduijsonp_\" + (Date.now()) + \"_\" + jsonpID);\n        },\n        // 发送信息至服务器时内容编码类型\n        contentType: 'application/x-www-form-urlencoded',\n        // 设置请求超时时间（毫秒）\n        timeout: 0,\n        // 是否在 document 上触发全局 ajax 事件\n        global: true,\n        // beforeSend:    function (XMLHttpRequest) 请求发送前执行，返回 false 可取消本次 ajax 请求\n        // success:       function (data, textStatus, XMLHttpRequest) 请求成功时调用\n        // error:         function (XMLHttpRequest, textStatus) 请求失败时调用\n        // statusCode:    {404: function ()}\n        //                200-299之间的状态码表示成功，参数和 success 回调一样；其他状态码表示失败，参数和 error 回调一样\n        // complete:      function (XMLHttpRequest, textStatus) 请求完成后回调函数 (请求成功或失败之后均调用)\n      };\n\n      // 回调函数\n      var callbacks = [\n        'beforeSend',\n        'success',\n        'error',\n        'statusCode',\n        'complete' ];\n\n      // 是否已取消请求\n      var isCanceled = false;\n\n      // 保存全局配置\n      var globals = globalOptions;\n\n      // 事件参数\n      var eventParams = {};\n\n      // 合并全局参数到默认参数，全局回调函数不覆盖\n      each(globals, function (key, value) {\n        if (callbacks.indexOf(key) < 0) {\n          defaults[key] = value;\n        }\n      });\n\n      // 参数合并\n      options = $.extend({}, defaults, options);\n\n      /**\n       * 触发全局事件\n       * @param event string 事件名\n       * @param xhr XMLHttpRequest 事件参数\n       */\n      function triggerEvent(event, xhr) {\n        if (options.global) {\n          $(document).trigger(event, xhr);\n        }\n      }\n\n      /**\n       * 触发 XHR 回调和事件\n       * @param callback string 回调函数名称\n       * @param args\n       */\n      function triggerCallback(callback) {\n        var args = [], len = arguments.length - 1;\n        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n        var result1;\n        var result2;\n\n        if (callback) {\n          // 全局回调\n          if (callback in globals) {\n            result1 = globals[callback].apply(globals, args);\n          }\n\n          // 自定义回调\n          if (options[callback]) {\n            result2 = options[callback].apply(options, args);\n          }\n\n          // beforeSend 回调返回 false 时取消 ajax 请求\n          if (callback === 'beforeSend' && (result1 === false || result2 === false)) {\n            isCanceled = true;\n          }\n        }\n      }\n\n      // 请求方式转为大写\n      var method = options.method.toUpperCase();\n\n      // 默认使用当前页面 URL\n      if (!options.url) {\n        options.url = window.location.toString();\n      }\n\n      // 需要发送的数据\n      // GET/HEAD 请求和 processData 为 true 时，转换为查询字符串格式，特殊格式不转换\n      var sendData;\n      if (\n        (isQueryStringData(method) || options.processData)\n        && options.data\n        && [ArrayBuffer, Blob, Document, FormData].indexOf(options.data.constructor) < 0\n      ) {\n        sendData = isString(options.data) ? options.data : $.param(options.data);\n      } else {\n        sendData = options.data;\n      }\n\n      // 对于 GET、HEAD 类型的请求，把 data 数据添加到 URL 中\n      if (isQueryStringData(method) && sendData) {\n        // 查询字符串拼接到 URL 中\n        options.url = appendQuery(options.url, sendData);\n        sendData = null;\n      }\n\n      // JSONP\n      if (options.dataType === 'jsonp') {\n        // URL 中添加自动生成的回调函数名\n        var callbackName = isFunction(options.jsonpCallback)\n          ? options.jsonpCallback()\n          : options.jsonpCallback;\n        var requestUrl = appendQuery(options.url, ((options.jsonp) + \"=\" + callbackName));\n\n        eventParams.options = options;\n\n        triggerEvent(ajaxEvent.ajaxStart, eventParams);\n        triggerCallback('beforeSend', null);\n\n        if (isCanceled) {\n          return undefined;\n        }\n\n        var abortTimeout;\n\n        // 创建 script\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n\n        // 创建 script 失败\n        script.onerror = function () {\n          if (abortTimeout) {\n            clearTimeout(abortTimeout);\n          }\n\n          triggerEvent(ajaxEvent.ajaxError, eventParams);\n          triggerCallback('error', null, 'scripterror');\n\n          triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n          triggerCallback('complete', null, 'scripterror');\n        };\n\n        script.src = requestUrl;\n\n        // 处理\n        window[callbackName] = function (data) {\n          if (abortTimeout) {\n            clearTimeout(abortTimeout);\n          }\n\n          eventParams.data = data;\n\n          triggerEvent(ajaxEvent.ajaxSuccess, eventParams);\n          triggerCallback('success', data, 'success', null);\n\n          $(script).remove();\n          script = null;\n          delete window[callbackName];\n        };\n\n        $('head').append(script);\n\n        if (options.timeout > 0) {\n          abortTimeout = setTimeout(function () {\n            $(script).remove();\n            script = null;\n\n            triggerEvent(ajaxEvent.ajaxError, eventParams);\n            triggerCallback('error', null, 'timeout');\n          }, options.timeout);\n        }\n\n        return undefined;\n      }\n\n      // GET/HEAD 请求的缓存处理\n      if (isQueryStringData(method) && !options.cache) {\n        options.url = appendQuery(options.url, (\"_=\" + (Date.now())));\n      }\n\n      // 创建 XHR\n      var xhr = new XMLHttpRequest();\n\n      xhr.open(method, options.url, options.async, options.username, options.password);\n\n      if (\n        options.contentType\n        || (\n          sendData\n          && !isQueryStringData(method)\n          && options.contentType !== false\n        )\n      ) {\n        xhr.setRequestHeader('Content-Type', options.contentType);\n      }\n\n      // 设置 Accept\n      if (options.dataType === 'json') {\n        xhr.setRequestHeader('Accept', 'application/json, text/javascript');\n      }\n\n      // 添加 headers\n      if (options.headers) {\n        each(options.headers, function (key, value) {\n          xhr.setRequestHeader(key, value);\n        });\n      }\n\n      // 检查是否是跨域请求\n      if (options.crossDomain === undefined) {\n        options.crossDomain = /^([\\w-]+:)?\\/\\/([^/]+)/.test(options.url)\n          && RegExp.$2 !== window.location.host;\n      }\n\n      if (!options.crossDomain) {\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      }\n\n      if (options.xhrFields) {\n        each(options.xhrFields, function (key, value) {\n          xhr[key] = value;\n        });\n      }\n\n      eventParams.xhr = xhr;\n      eventParams.options = options;\n\n      var xhrTimeout;\n\n      xhr.onload = function () {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        // 包含成功或错误代码的字符串\n        var textStatus;\n\n        // AJAX 返回的 HTTP 响应码是否表示成功\n        var isHttpStatusSuccess = (xhr.status >= 200 && xhr.status < 300) || xhr.status === 0;\n\n        var responseData;\n\n        if (isHttpStatusSuccess) {\n          if (xhr.status === 204 || method === 'HEAD') {\n            textStatus = 'nocontent';\n          } else if (xhr.status === 304) {\n            textStatus = 'notmodified';\n          } else {\n            textStatus = 'success';\n          }\n\n          if (options.dataType === 'json') {\n            try {\n              responseData = JSON.parse(xhr.responseText);\n              eventParams.data = responseData;\n            } catch (err) {\n              textStatus = 'parsererror';\n\n              triggerEvent(ajaxEvent.ajaxError, eventParams);\n              triggerCallback('error', xhr, textStatus);\n            }\n\n            if (textStatus !== 'parsererror') {\n              triggerEvent(ajaxEvent.ajaxSuccess, eventParams);\n              triggerCallback('success', responseData, textStatus, xhr);\n            }\n          } else {\n            responseData = xhr.responseType === 'text' || xhr.responseType === ''\n              ? xhr.responseText\n              : xhr.response;\n            eventParams.data = responseData;\n\n            triggerEvent(ajaxEvent.ajaxSuccess, eventParams);\n            triggerCallback('success', responseData, textStatus, xhr);\n          }\n        } else {\n          textStatus = 'error';\n\n          triggerEvent(ajaxEvent.ajaxError, eventParams);\n          triggerCallback('error', xhr, textStatus);\n        }\n\n        // statusCode\n        each([globals.statusCode, options.statusCode], function (i, func) {\n          if (func && func[xhr.status]) {\n            if (isHttpStatusSuccess) {\n              func[xhr.status](responseData, textStatus, xhr);\n            } else {\n              func[xhr.status](xhr, textStatus);\n            }\n          }\n        });\n\n        triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, textStatus);\n      };\n\n      xhr.onerror = function () {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        triggerEvent(ajaxEvent.ajaxError, eventParams);\n        triggerCallback('error', xhr, xhr.statusText);\n\n        triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, 'error');\n      };\n\n      xhr.onabort = function () {\n        var textStatus = 'abort';\n\n        if (xhrTimeout) {\n          textStatus = 'timeout';\n          clearTimeout(xhrTimeout);\n        }\n\n        triggerEvent(ajaxEvent.ajaxError, eventParams);\n        triggerCallback('error', xhr, textStatus);\n\n        triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, textStatus);\n      };\n\n      // ajax start 回调\n      triggerEvent(ajaxEvent.ajaxStart, eventParams);\n      triggerCallback('beforeSend', xhr);\n\n      if (isCanceled) {\n        return xhr;\n      }\n\n      // Timeout\n      if (options.timeout > 0) {\n        xhrTimeout = setTimeout(function () {\n          xhr.abort();\n        }, options.timeout);\n      }\n\n      // 发送 XHR\n      xhr.send(sendData);\n\n      return xhr;\n    },\n  });\n\n  // 监听全局事件\n  //\n  // 通过 $(document).on('success.mdui.ajax', function (event, params) {}) 调用时，包含两个参数\n  // event: 事件对象\n  // params: {\n  //   xhr: XMLHttpRequest 对象\n  //   options: ajax 请求的配置参数\n  //   data: ajax 请求返回的数据\n  // }\n\n  // 全局 Ajax 事件快捷方法\n  // $(document).ajaxStart(function (event, xhr, options) {})\n  // $(document).ajaxSuccess(function (event, xhr, options, data) {})\n  // $(document).ajaxError(function (event, xhr, options) {})\n  // $(document).ajaxComplete(function (event, xhr, options) {})\n  each(ajaxEvent, function (name, eventName) {\n    $.fn[name] = function (fn) {\n      return this.on(eventName, function (e, params) {\n        fn(e, params.xhr, params.options, params.data);\n      });\n    };\n  });\n\n  return $;\n\n}());\n","/**\n * =============================================================================\n * ************   定义全局变量   ************\n * =============================================================================\n */\n\nvar $document = $(document);\nvar $window = $(window);\n\n/**\n * 队列 -- 当前队列的 api 和 jquery 不一样，所以不打包进 mdui.JQ 里\n */\nvar queue = {};\n(function () {\n  var queueData = [];\n\n  /**\n   * 写入队列\n   * @param queueName 对列名\n   * @param func 函数名，该参数为空时，返回所有队列\n   */\n  queue.queue = function (queueName, func) {\n    if (queueData[queueName] === undefined) {\n      queueData[queueName] = [];\n    }\n\n    if (func === undefined) {\n      return queueData[queueName];\n    }\n\n    queueData[queueName].push(func);\n  };\n\n  /**\n   * 从队列中移除第一个函数，并执行该函数\n   * @param queueName\n   */\n  queue.dequeue = function (queueName) {\n    if (queueData[queueName] !== undefined && queueData[queueName].length) {\n      (queueData[queueName].shift())();\n    }\n  };\n\n})();\n\n/**\n * touch 事件后的 500ms 内禁用 mousedown 事件\n *\n * 不支持触控的屏幕上事件顺序为 mousedown -> mouseup -> click\n * 支持触控的屏幕上事件顺序为 touchstart -> touchend -> mousedown -> mouseup -> click\n */\nvar TouchHandler = {\n  touches: 0,\n\n  /**\n   * 该事件是否被允许\n   * 在执行事件前调用该方法判断事件是否可以执行\n   * @param e\n   * @returns {boolean}\n   */\n  isAllow: function (e) {\n    var allow = true;\n\n    if (\n      TouchHandler.touches &&\n      [\n        'mousedown',\n        'mouseup',\n        'mousemove',\n        'click',\n        'mouseover',\n        'mouseout',\n        'mouseenter',\n        'mouseleave',\n      ].indexOf(e.type) > -1\n    ) {\n      // 触发了 touch 事件后阻止鼠标事件\n      allow = false;\n    }\n\n    return allow;\n  },\n\n  /**\n   * 在 touchstart 和 touchmove、touchend、touchcancel 事件中调用该方法注册事件\n   * @param e\n   */\n  register: function (e) {\n    if (e.type === 'touchstart') {\n      // 触发了 touch 事件\n      TouchHandler.touches += 1;\n    } else if (['touchmove', 'touchend', 'touchcancel'].indexOf(e.type) > -1) {\n      // touch 事件结束 500ms 后解除对鼠标事件的阻止\n      setTimeout(function () {\n        if (TouchHandler.touches) {\n          TouchHandler.touches -= 1;\n        }\n      }, 500);\n    }\n  },\n\n  start: 'touchstart mousedown',\n  move: 'touchmove mousemove',\n  end: 'touchend mouseup',\n  cancel: 'touchcancel mouseleave',\n  unlock: 'touchend touchmove touchcancel',\n};\n\n// 测试事件\n// 在每一个事件中都使用 TouchHandler.isAllow(e) 判断事件是否可执行\n// 在 touchstart 和 touchmove、touchend、touchcancel\n// (function () {\n//\n//   $document\n//     .on(TouchHandler.start, function (e) {\n//       if (!TouchHandler.isAllow(e)) {\n//         return;\n//       }\n//       TouchHandler.register(e);\n//       console.log(e.type);\n//     })\n//     .on(TouchHandler.move, function (e) {\n//       if (!TouchHandler.isAllow(e)) {\n//         return;\n//       }\n//       console.log(e.type);\n//     })\n//     .on(TouchHandler.end, function (e) {\n//       if (!TouchHandler.isAllow(e)) {\n//         return;\n//       }\n//       console.log(e.type);\n//     })\n//     .on(TouchHandler.unlock, TouchHandler.register);\n// })();\n\n$(function () {\n  // 避免页面加载完后直接执行css动画\n  // https://css-tricks.com/transitions-only-after-page-load/\n\n  setTimeout(function () {\n    $('body').addClass('mdui-loaded');\n  }, 0);\n});\n","/**\n * =============================================================================\n * ************   MDUI 内部使用的函数   ************\n * =============================================================================\n */\n\n/**\n * 解析 DATA API 的参数\n * @param str\n * @returns {*}\n */\nvar parseOptions = function (str) {\n  var options = {};\n\n  if (str === null || !str) {\n    return options;\n  }\n\n  if (typeof str === 'object') {\n    return str;\n  }\n\n  /* jshint ignore:start */\n  var start = str.indexOf('{');\n  try {\n    options = (new Function('',\n      'var json = ' + str.substr(start) +\n      '; return JSON.parse(JSON.stringify(json));'))();\n  } catch (e) {\n  }\n  /* jshint ignore:end */\n\n  return options;\n};\n\n/**\n * 绑定组件的事件\n * @param eventName 事件名\n * @param pluginName 插件名\n * @param inst 插件实例\n * @param trigger 在该元素上触发\n * @param obj 事件参数\n */\nvar componentEvent = function (eventName, pluginName, inst, trigger, obj) {\n  if (!obj) {\n    obj = {};\n  }\n\n  obj.inst = inst;\n\n  var fullEventName = eventName + '.mdui.' + pluginName;\n\n  // jQuery 事件\n  if (typeof jQuery !== 'undefined') {\n    jQuery(trigger).trigger(fullEventName, obj);\n  }\n\n  // JQ 事件\n  $(trigger).trigger(fullEventName, obj);\n};\n","/**\n * =============================================================================\n * ************   开放的常用方法   ************\n * =============================================================================\n */\n\n$.fn.extend({\n\n  /**\n   * 执行强制重绘\n   */\n  reflow: function () {\n    return this.each(function () {\n      return this.clientLeft;\n    });\n  },\n\n  /**\n   * 设置 transition 时间\n   * @param duration\n   */\n  transition: function (duration) {\n    if (typeof duration !== 'string') {\n      duration = duration + 'ms';\n    }\n\n    return this.each(function () {\n      this.style.webkitTransitionDuration = duration;\n      this.style.transitionDuration = duration;\n    });\n  },\n\n  /**\n   * transition 动画结束回调\n   * @param callback\n   * @returns {transitionEnd}\n   */\n  transitionEnd: function (callback) {\n    var events = [\n        'webkitTransitionEnd',\n        'transitionend',\n      ];\n    var i;\n    var _this = this;\n\n    function fireCallBack(e) {\n      if (e.target !== this) {\n        return;\n      }\n\n      callback.call(this, e);\n\n      for (i = 0; i < events.length; i++) {\n        _this.off(events[i], fireCallBack);\n      }\n    }\n\n    if (callback) {\n      for (i = 0; i < events.length; i++) {\n        _this.on(events[i], fireCallBack);\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * 设置 transform-origin 属性\n   * @param transformOrigin\n   */\n  transformOrigin: function (transformOrigin) {\n    return this.each(function () {\n      this.style.webkitTransformOrigin = transformOrigin;\n      this.style.transformOrigin = transformOrigin;\n    });\n  },\n\n  /**\n   * 设置 transform 属性\n   * @param transform\n   */\n  transform: function (transform) {\n    return this.each(function () {\n      this.style.webkitTransform = transform;\n      this.style.transform = transform;\n    });\n  },\n\n});\n\n$.extend({\n  /**\n   * 创建并显示遮罩\n   * @param zIndex 遮罩层的 z-index\n   */\n  showOverlay: function (zIndex) {\n    var $overlay = $('.mdui-overlay');\n\n    if ($overlay.length) {\n      $overlay.data('isDeleted', 0);\n\n      if (zIndex !== undefined) {\n        $overlay.css('z-index', zIndex);\n      }\n    } else {\n      if (zIndex === undefined) {\n        zIndex = 2000;\n      }\n\n      $overlay = $('<div class=\"mdui-overlay\">')\n        .appendTo(document.body)\n        .reflow()\n        .css('z-index', zIndex);\n    }\n\n    var level = $overlay.data('overlay-level') || 0;\n    return $overlay\n      .data('overlay-level', ++level)\n      .addClass('mdui-overlay-show');\n  },\n\n  /**\n   * 隐藏遮罩层\n   * @param force 是否强制隐藏遮罩\n   */\n  hideOverlay: function (force) {\n    var $overlay = $('.mdui-overlay');\n\n    if (!$overlay.length) {\n      return;\n    }\n\n    var level = force ? 1 : $overlay.data('overlay-level');\n    if (level > 1) {\n      $overlay.data('overlay-level', --level);\n      return;\n    }\n\n    $overlay\n      .data('overlay-level', 0)\n      .removeClass('mdui-overlay-show')\n      .data('isDeleted', 1)\n      .transitionEnd(function () {\n        if ($overlay.data('isDeleted')) {\n          $overlay.remove();\n        }\n      });\n  },\n\n  /**\n   * 锁定屏幕\n   */\n  lockScreen: function () {\n    var $body = $('body');\n\n    // 不直接把 body 设为 box-sizing: border-box，避免污染全局样式\n    var newBodyWidth = $body.width();\n\n    $body\n      .addClass('mdui-locked')\n      .width(newBodyWidth);\n\n    var level = $body.data('lockscreen-level') || 0;\n    $body.data('lockscreen-level', ++level);\n  },\n\n  /**\n   * 解除屏幕锁定\n   * @param force 是否强制解锁屏幕\n   */\n  unlockScreen: function (force) {\n    var $body = $('body');\n\n    var level = force ? 1 : $body.data('lockscreen-level');\n    if (level > 1) {\n      $body.data('lockscreen-level', --level);\n      return;\n    }\n\n    $body\n      .data('lockscreen-level', 0)\n      .removeClass('mdui-locked')\n      .width('');\n  },\n\n  /**\n   * 函数节流\n   * @param fn\n   * @param delay\n   * @returns {Function}\n   */\n  throttle: function (fn, delay) {\n    var timer = null;\n    if (!delay || delay < 16) {\n      delay = 16;\n    }\n\n    return function () {\n      var _this = this;\n      var args = arguments;\n\n      if (timer === null) {\n        timer = setTimeout(function () {\n          fn.apply(_this, args);\n          timer = null;\n        }, delay);\n      }\n    };\n  },\n});\n\n/**\n * 生成唯一 id\n * @param string name id的名称，若该名称对于的guid不存在，则生成新的guid并返回；若已存在，则返回原有guid\n * @returns {string}\n */\n(function () {\n  var GUID = {};\n\n  $.extend({\n    guid: function (name) {\n      if (typeof name !== 'undefined' && typeof GUID[name] !== 'undefined') {\n        return GUID[name];\n      }\n\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n          .toString(16)\n          .substring(1);\n      }\n\n      var guid = s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n\n      if (typeof name !== 'undefined') {\n        GUID[name] = guid;\n      }\n\n      return guid;\n    },\n  });\n})();\n","/**\n * =============================================================================\n * ************   Mutation   ************\n * =============================================================================\n */\n\n(function () {\n  /**\n   * API 初始化代理, 当 DOM 突变再次执行代理的初始化函数. 使用方法:\n   *\n   * 1. 代理组件 API 执行初始化函数, selector 必须为字符串.\n   *    mdui.mutation(selector, apiInit);\n   *    mutation 会执行 $(selector).each(apiInit)\n   *\n   * 2. 突变时, 再次执行代理的初始化函数\n   *    mdui.mutation()        等价 $(document).mutation()\n   *    $(selector).mutation() 在 selector 节点内进行 API 初始化\n   *\n   * 原理:\n   *\n   *    mutation 执行了 $().data('mdui.mutation', [selector]).\n   *    当元素被重构时, 该数据会丢失, 由此判断是否突变.\n   *\n   * 提示:\n   *\n   *    类似 Drawer 可以使用委托事件完成.\n   *    类似 Collapse 需要知道 DOM 发生突变, 并再次进行初始化.\n   */\n  var entries = { };\n\n  function mutation(selector, apiInit, that, i, item) {\n    var $this = $(that);\n    var m = $this.data('mdui.mutation');\n\n    if (!m) {\n      m = [];\n      $this.data('mdui.mutation', m);\n    }\n\n    if (m.indexOf(selector) === -1) {\n      m.push(selector);\n      apiInit.call(that, i, item);\n    }\n  }\n\n  $.fn.extend({\n    mutation: function () {\n      return this.each(function (i, item) {\n        var $this = $(this);\n        $.each(entries, function (selector, apiInit) {\n          if ($this.is(selector)) {\n            mutation(selector, apiInit, $this[0], i, item);\n          }\n\n          $this.find(selector).each(function (i, item) {\n            mutation(selector, apiInit, this, i, item);\n          });\n        });\n      });\n    },\n  });\n\n  mdui.mutation = function (selector, apiInit) {\n    if (typeof selector !== 'string' || typeof apiInit !== 'function') {\n      $(document).mutation();\n      return;\n    }\n\n    entries[selector] = apiInit;\n    $(selector).each(function (i, item) {\n      mutation(selector, apiInit, this, i, item);\n    });\n  };\n\n})();\n","/**\n * =============================================================================\n * ************   Snackbar   ************\n * =============================================================================\n */\n\n(function () {\n\n  /**\n   * 当前打开着的 Snackbar\n   */\n  var currentInst;\n\n  /**\n   * 对列名\n   * @type {string}\n   */\n  var queueName = '__md_snackbar';\n\n  var DEFAULT = {\n    timeout: 4000,                  // 在用户没有操作时多长时间自动隐藏\n    buttonText: '',                 // 按钮的文本\n    buttonColor: '',                // 按钮的颜色，支持 blue #90caf9 rgba(...)\n    position: 'bottom',             // 位置 bottom、top、left-top、left-bottom、right-top、right-bottom\n    closeOnButtonClick: true,       // 点击按钮时关闭\n    closeOnOutsideClick: true,      // 触摸或点击屏幕其他地方时关闭\n    onClick: function () {          // 在 Snackbar 上点击的回调\n    },\n\n    onButtonClick: function () {    // 点击按钮的回调\n    },\n\n    onOpen: function () {           // 打开动画开始时的回调\n    },\n\n    onOpened: function () {         // 打开动画结束时的回调\n    },\n\n    onClose: function () {          // 关闭动画开始时的回调\n    },\n\n    onClosed: function () {         // 打开动画结束时的回调\n    },\n  };\n\n  /**\n   * 点击 Snackbar 外面的区域关闭\n   * @param e\n   */\n  var closeOnOutsideClick = function (e) {\n    var $target = $(e.target);\n    if (!$target.hasClass('mdui-snackbar') && !$target.parents('.mdui-snackbar').length) {\n      currentInst.close();\n    }\n  };\n\n  /**\n   * Snackbar 实例\n   * @param message\n   * @param opts\n   * @constructor\n   */\n  function Snackbar(message, opts) {\n    var _this = this;\n\n    _this.message = message;\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n\n    // message 参数必须\n    if (!_this.message) {\n      return;\n    }\n\n    _this.state = 'closed';\n\n    _this.timeoutId = false;\n\n    // 按钮颜色\n    var buttonColorStyle = '';\n    var buttonColorClass = '';\n\n    if (\n      _this.options.buttonColor.indexOf('#') === 0 ||\n      _this.options.buttonColor.indexOf('rgb') === 0\n    ) {\n      buttonColorStyle = 'style=\"color:' + _this.options.buttonColor + '\"';\n    } else if (_this.options.buttonColor !== '') {\n      buttonColorClass = 'mdui-text-color-' + _this.options.buttonColor;\n    }\n\n    // 添加 HTML\n    _this.$snackbar = $(\n      '<div class=\"mdui-snackbar\">' +\n        '<div class=\"mdui-snackbar-text\">' +\n          _this.message +\n        '</div>' +\n        (_this.options.buttonText ?\n          ('<a href=\"javascript:void(0)\" ' +\n          'class=\"mdui-snackbar-action mdui-btn mdui-ripple mdui-ripple-white ' +\n            buttonColorClass + '\" ' +\n            buttonColorStyle + '>' +\n            _this.options.buttonText +\n          '</a>') :\n          ''\n        ) +\n      '</div>')\n      .appendTo(document.body);\n\n    // 设置位置\n    _this._setPosition('close');\n\n    _this.$snackbar\n      .reflow()\n      .addClass('mdui-snackbar-' + _this.options.position);\n  }\n\n  /**\n   * 设置 Snackbar 的位置\n   * @param state\n   * @private\n   */\n  Snackbar.prototype._setPosition = function (state) {\n    var _this = this;\n\n    var snackbarHeight = _this.$snackbar[0].clientHeight;\n    var position = _this.options.position;\n\n    var translateX;\n    var translateY;\n\n    // translateX\n    if (position === 'bottom' || position === 'top') {\n      translateX = '-50%';\n    } else {\n      translateX = '0';\n    }\n\n    // translateY\n    if (state === 'open') {\n      translateY = '0';\n    } else {\n      if (position === 'bottom') {\n        translateY = snackbarHeight;\n      }\n\n      if (position === 'top') {\n        translateY = -snackbarHeight;\n      }\n\n      if (position === 'left-top' || position === 'right-top') {\n        translateY = -snackbarHeight - 24;\n      }\n\n      if (position === 'left-bottom' || position === 'right-bottom') {\n        translateY = snackbarHeight + 24;\n      }\n    }\n\n    _this.$snackbar.transform('translate(' + translateX + ',' + translateY + 'px)');\n  };\n\n  /**\n   * 打开 Snackbar\n   */\n  Snackbar.prototype.open = function () {\n    var _this = this;\n\n    if (!_this.message) {\n      return;\n    }\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    // 如果当前有正在显示的 Snackbar，则先加入队列，等旧 Snackbar 关闭后再打开\n    if (currentInst) {\n      queue.queue(queueName, function () {\n        _this.open();\n      });\n\n      return;\n    }\n\n    currentInst = _this;\n\n    // 开始打开\n    _this.state = 'opening';\n    _this.options.onOpen();\n\n    _this._setPosition('open');\n\n    _this.$snackbar\n      .transitionEnd(function () {\n        if (_this.state !== 'opening') {\n          return;\n        }\n\n        _this.state = 'opened';\n        _this.options.onOpened();\n\n        // 有按钮时绑定事件\n        if (_this.options.buttonText) {\n          _this.$snackbar\n            .find('.mdui-snackbar-action')\n            .on('click', function () {\n              _this.options.onButtonClick();\n              if (_this.options.closeOnButtonClick) {\n                _this.close();\n              }\n            });\n        }\n\n        // 点击 snackbar 的事件\n        _this.$snackbar.on('click', function (e) {\n          if (!$(e.target).hasClass('mdui-snackbar-action')) {\n            _this.options.onClick();\n          }\n        });\n\n        // 点击 Snackbar 外面的区域关闭\n        if (_this.options.closeOnOutsideClick) {\n          $document.on(TouchHandler.start, closeOnOutsideClick);\n        }\n\n        // 超时后自动关闭\n        if (_this.options.timeout) {\n          _this.timeoutId = setTimeout(function () {\n            _this.close();\n          }, _this.options.timeout);\n        }\n      });\n  };\n\n  /**\n   * 关闭 Snackbar\n   */\n  Snackbar.prototype.close = function () {\n    var _this = this;\n\n    if (!_this.message) {\n      return;\n    }\n\n    if (_this.state === 'closing' || _this.state === 'closed') {\n      return;\n    }\n\n    if (_this.timeoutId) {\n      clearTimeout(_this.timeoutId);\n    }\n\n    if (_this.options.closeOnOutsideClick) {\n      $document.off(TouchHandler.start, closeOnOutsideClick);\n    }\n\n    _this.state = 'closing';\n    _this.options.onClose();\n\n    _this._setPosition('close');\n\n    _this.$snackbar\n      .transitionEnd(function () {\n        if (_this.state !== 'closing') {\n          return;\n        }\n\n        currentInst = null;\n        _this.state = 'closed';\n        _this.options.onClosed();\n        _this.$snackbar.remove();\n        queue.dequeue(queueName);\n      });\n  };\n\n  /**\n   * 打开 Snackbar\n   * @param message\n   * @param opts\n   */\n  mdui.snackbar = function (message, opts) {\n    if (typeof message !== 'string') {\n      opts = message;\n      message = opts.message;\n    }\n\n    var inst = new Snackbar(message, opts);\n\n    inst.open();\n    return inst;\n  };\n\n})();\n","/**\n * =============================================================================\n * ************   Text Field 文本框   ************\n * =============================================================================\n */\n\n(function () {\n\n  var getProp = function (obj, prop) {\n    return (\n      typeof obj === 'object' &&\n      obj !== null &&\n      obj[prop] !== undefined &&\n      obj[prop]\n    ) ? obj[prop] : false;\n  };\n\n  /**\n   * 输入框事件\n   * @param e\n   */\n  var inputEvent = function (e) {\n    var input = e.target;\n    var $input = $(input);\n    var event = e.type;\n    var value = $input.val();\n\n    // reInit 为 true 时，需要重新初始化文本框\n    var reInit = getProp(e.detail, 'reInit');\n\n    // domLoadedEvent 为 true 时，为 DOM 加载完毕后自动触发的事件\n    var domLoadedEvent = getProp(e.detail, 'domLoadedEvent');\n\n    // 文本框类型\n    var type = $input.attr('type') || '';\n    if (['checkbox', 'button', 'submit', 'range', 'radio', 'image'].indexOf(type) >= 0) {\n      return;\n    }\n\n    var $textField = $input.parent('.mdui-textfield');\n\n    // 输入框是否聚焦\n    if (event === 'focus') {\n      $textField.addClass('mdui-textfield-focus');\n    }\n\n    if (event === 'blur') {\n      $textField.removeClass('mdui-textfield-focus');\n    }\n\n    // 输入框是否为空\n    if (event === 'blur' || event === 'input') {\n      $textField[(value && value !== '') ? 'addClass' : 'removeClass']('mdui-textfield-not-empty');\n    }\n\n    // 输入框是否禁用\n    $textField[input.disabled ? 'addClass' : 'removeClass']('mdui-textfield-disabled');\n\n    // 表单验证\n    if ((event === 'input' || event === 'blur') && !domLoadedEvent) {\n      if (input.validity) {\n        var method = input.validity.valid ? 'removeClass' : 'addClass';\n        $textField[method]('mdui-textfield-invalid-html5');\n      }\n    }\n\n    // textarea 高度自动调整\n    if (e.target.nodeName.toLowerCase() === 'textarea') {\n\n      // IE bug：textarea 的值仅为多个换行，不含其他内容时，textarea 的高度不准确\n      //         此时，在计算高度前，在值的开头加入一个空格，计算完后，移除空格\n      var inputValue = $input.val();\n      var hasExtraSpace = false;\n      if (inputValue.replace(/[\\r\\n]/g, '') === '') {\n        $input.val(' ' + inputValue);\n        hasExtraSpace = true;\n      }\n\n      // 设置 textarea 高度\n      $input.height('');\n      var height = $input.height();\n      var scrollHeight = input.scrollHeight;\n\n      if (scrollHeight > height) {\n        $input.height(scrollHeight);\n      }\n\n      // 计算完，还原 textarea 的值\n      if (hasExtraSpace) {\n        $input.val(inputValue);\n      }\n    }\n\n    // 实时字数统计\n    if (reInit) {\n      $textField\n        .find('.mdui-textfield-counter')\n        .remove();\n    }\n\n    var maxlength = $input.attr('maxlength');\n    if (maxlength) {\n      if (reInit || domLoadedEvent) {\n        $('<div class=\"mdui-textfield-counter\">' +\n            '<span class=\"mdui-textfield-counter-inputed\"></span> / ' + maxlength +\n          '</div>').appendTo($textField);\n      }\n\n      $textField.find('.mdui-textfield-counter-inputed').text(value.length.toString());\n    }\n\n    // 含 帮助文本、错误提示、字数统计 时，增加文本框底部内边距\n    if (\n      $textField.find('.mdui-textfield-helper').length ||\n      $textField.find('.mdui-textfield-error').length ||\n      maxlength\n    ) {\n      $textField.addClass('mdui-textfield-has-bottom');\n    }\n  };\n\n  // 绑定事件\n  $document.on('input focus blur', '.mdui-textfield-input', { useCapture: true }, inputEvent);\n\n  // 可展开文本框展开\n  $document.on('click', '.mdui-textfield-expandable .mdui-textfield-icon', function () {\n    $(this)\n\n      // 展开文本框\n      .parents('.mdui-textfield')\n      .addClass('mdui-textfield-expanded')\n\n      // 聚焦到输入框\n      .find('.mdui-textfield-input')[0].focus();\n  });\n\n  // 可展开文本框关闭\n  $document.on('click', '.mdui-textfield-expanded .mdui-textfield-close', function () {\n    $(this)\n\n      // 关闭文本框\n      .parents('.mdui-textfield')\n      .removeClass('mdui-textfield-expanded')\n\n      // 清空输入框\n      .find('.mdui-textfield-input')\n      .val('');\n  });\n\n  /**\n   * 通过 JS 更新了表单内容，需要重新进行表单处理\n   * @param- 如果传入了 .mdui-textfield 所在的 DOM 元素，则更新该文本框；否则，更新所有文本框\n   */\n  mdui.updateTextFields = function () {\n    $(arguments.length ? arguments[0] : '.mdui-textfield').each(function () {\n      $(this)\n        .find('.mdui-textfield-input')\n        .trigger('input', {\n          reInit: true,\n        });\n    });\n  };\n})();\n\n$(function () {\n  /**\n   * 初始化文本框\n   */\n  mdui.mutation('.mdui-textfield', function () {\n    $(this)\n      .find('.mdui-textfield-input')\n      .trigger('input', {\n        domLoadedEvent: true,\n      });\n  });\n});\n","  /* jshint ignore:start */\n  mdui.JQ = $;\n  return mdui;\n})));\n/* jshint ignore:end */\n","/**\n * =============================================================================\n * ************   Headroom.js   ************\n * =============================================================================\n */\n\nmdui.Headroom = (function () {\n\n  /**\n   * 默认参数\n   * @type {{}}\n   */\n  var DEFAULT = {\n    tolerance: 5,                                 // 滚动条滚动多少距离开始隐藏或显示元素，{down: num, up: num}，或数字\n    offset: 0,                                    // 在页面顶部多少距离内滚动不会隐藏元素\n    initialClass: 'mdui-headroom',                // 初始化时添加的类\n    pinnedClass: 'mdui-headroom-pinned-top',      // 元素固定时添加的类\n    unpinnedClass: 'mdui-headroom-unpinned-top',  // 元素隐藏时添加的类\n  };\n\n  /**\n   * Headroom\n   * @param selector\n   * @param opts\n   * @constructor\n   */\n  function Headroom(selector, opts) {\n    var _this = this;\n\n    _this.$headroom = $(selector).eq(0);\n    if (!_this.$headroom.length) {\n      return;\n    }\n\n    // 已通过自定义属性实例化过，不再重复实例化\n    var oldInst = _this.$headroom.data('mdui.headroom');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n\n    // 数值转为 {down: bum, up: num}\n    var tolerance = _this.options.tolerance;\n    if (tolerance !== Object(tolerance)) {\n      _this.options.tolerance = {\n        down: tolerance,\n        up: tolerance,\n      };\n    }\n\n    _this._init();\n  }\n\n  /**\n   * 初始化\n   * @private\n   */\n  Headroom.prototype._init = function () {\n    var _this = this;\n\n    _this.state = 'pinned';\n    _this.$headroom\n      .addClass(_this.options.initialClass)\n      .removeClass(_this.options.pinnedClass + ' ' + _this.options.unpinnedClass);\n\n    _this.inited = false;\n    _this.lastScrollY = 0;\n\n    _this._attachEvent();\n  };\n\n  /**\n   * 监听滚动事件\n   * @private\n   */\n  Headroom.prototype._attachEvent = function () {\n    var _this = this;\n\n    if (!_this.inited) {\n      _this.lastScrollY = window.pageYOffset;\n      _this.inited = true;\n\n      $window.on('scroll', function () {\n        _this._scroll();\n      });\n    }\n  };\n\n  /**\n   * 滚动时的处理\n   * @private\n   */\n  Headroom.prototype._scroll = function () {\n    var _this = this;\n    _this.rafId = window.requestAnimationFrame(function () {\n      var currentScrollY = window.pageYOffset;\n      var direction = currentScrollY > _this.lastScrollY ? 'down' : 'up';\n      var toleranceExceeded =\n        Math.abs(currentScrollY - _this.lastScrollY) >=\n        _this.options.tolerance[direction];\n\n      if (\n        currentScrollY > _this.lastScrollY &&\n        currentScrollY >= _this.options.offset &&\n        toleranceExceeded) {\n        _this.unpin();\n      } else if (\n        (currentScrollY < _this.lastScrollY && toleranceExceeded) ||\n        currentScrollY <= _this.options.offset\n      ) {\n        _this.pin();\n      }\n\n      _this.lastScrollY = currentScrollY;\n    });\n  };\n\n  /**\n   * 动画结束回调\n   * @param inst\n   */\n  var transitionEnd = function (inst) {\n    if (inst.state === 'pinning') {\n      inst.state = 'pinned';\n      componentEvent('pinned', 'headroom', inst, inst.$headroom);\n    }\n\n    if (inst.state === 'unpinning') {\n      inst.state = 'unpinned';\n      componentEvent('unpinned', 'headroom', inst, inst.$headroom);\n    }\n  };\n\n  /**\n   * 固定住\n   */\n  Headroom.prototype.pin = function () {\n    var _this = this;\n\n    if (\n      _this.state === 'pinning' ||\n      _this.state === 'pinned' ||\n      !_this.$headroom.hasClass(_this.options.initialClass)\n    ) {\n      return;\n    }\n\n    componentEvent('pin', 'headroom', _this, _this.$headroom);\n\n    _this.state = 'pinning';\n\n    _this.$headroom\n      .removeClass(_this.options.unpinnedClass)\n      .addClass(_this.options.pinnedClass)\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  /**\n   * 不固定住\n   */\n  Headroom.prototype.unpin = function () {\n    var _this = this;\n\n    if (\n      _this.state === 'unpinning' ||\n      _this.state === 'unpinned' ||\n      !_this.$headroom.hasClass(_this.options.initialClass)\n    ) {\n      return;\n    }\n\n    componentEvent('unpin', 'headroom', _this, _this.$headroom);\n\n    _this.state = 'unpinning';\n\n    _this.$headroom\n      .removeClass(_this.options.pinnedClass)\n      .addClass(_this.options.unpinnedClass)\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  /**\n   * 启用\n   */\n  Headroom.prototype.enable = function () {\n    var _this = this;\n\n    if (!_this.inited) {\n      _this._init();\n    }\n  };\n\n  /**\n   * 禁用\n   */\n  Headroom.prototype.disable = function () {\n    var _this = this;\n\n    if (_this.inited) {\n      _this.inited = false;\n      _this.$headroom\n        .removeClass([\n          _this.options.initialClass,\n          _this.options.pinnedClass,\n          _this.options.unpinnedClass,\n        ].join(' '));\n\n      $window.off('scroll', function () {\n        _this._scroll();\n      });\n\n      window.cancelAnimationFrame(_this.rafId);\n    }\n  };\n\n  /**\n   * 获取当前状态 pinning | pinned | unpinning | unpinned\n   */\n  Headroom.prototype.getState = function () {\n    return this.state;\n  };\n\n  return Headroom;\n\n})();\n","/**\n * =============================================================================\n * ************   Headroom 自定义属性 API   ************\n * =============================================================================\n */\n\n$(function () {\n  mdui.mutation('[mdui-headroom]', function () {\n    var $this = $(this);\n    var options = parseOptions($this.attr('mdui-headroom'));\n\n    var inst = $this.data('mdui.headroom');\n    if (!inst) {\n      inst = new mdui.Headroom($this, options);\n      $this.data('mdui.headroom', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   Appbar   ************\n * =============================================================================\n * 滚动时自动隐藏应用栏\n * mdui-appbar-scroll-hide\n * mdui-appbar-scroll-toolbar-hide\n */\n\n$(function () {\n  // 滚动时隐藏应用栏\n  mdui.mutation('.mdui-appbar-scroll-hide', function () {\n    var $this = $(this);\n    $this.data('mdui.headroom', new mdui.Headroom($this));\n  });\n\n  // 滚动时只隐藏应用栏中的工具栏\n  mdui.mutation('.mdui-appbar-scroll-toolbar-hide', function () {\n    var $this = $(this);\n    var inst = new mdui.Headroom($this, {\n      pinnedClass: 'mdui-headroom-pinned-toolbar',\n      unpinnedClass: 'mdui-headroom-unpinned-toolbar',\n    });\n    $this.data('mdui.headroom', inst);\n  });\n});\n","/**\n * =============================================================================\n * ************   Bottom navigation 底部导航栏   ************\n * =============================================================================\n */\n\n(function () {\n\n  // 切换导航项\n  $document.on('click', '.mdui-bottom-nav>a', function () {\n    var $this = $(this);\n    var $bottomNav = $this.parent();\n    var isThis;\n    $bottomNav.children('a').each(function (i, item) {\n      isThis = $this.is(item);\n      if (isThis) {\n        componentEvent('change', 'bottomNav', null, $bottomNav, {\n          index: i,\n        });\n      }\n\n      $(item)[isThis ? 'addClass' : 'removeClass']('mdui-bottom-nav-active');\n    });\n  });\n\n  // 滚动时隐藏 mdui-bottom-nav-scroll-hide\n  mdui.mutation('.mdui-bottom-nav-scroll-hide', function () {\n    var $this = $(this);\n    var inst = new mdui.Headroom($this, {\n      pinnedClass: 'mdui-headroom-pinned-down',\n      unpinnedClass: 'mdui-headroom-unpinned-down',\n    });\n    $this.data('mdui.headroom', inst);\n  });\n\n})();\n"]}